name: Build and Release for All Platforms

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag (e.g., v1.0.1)'
        required: true
        default: 'v1.0.7'

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          
      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2-
          
      - name: Build JAR
        run: mvn clean package -DskipTests
        
      - name: Build Windows Portable (.exe)
        run: |
          jpackage --input target --dest dist --name "GOVNO-Screamer" --main-jar govnoscreamer-widget-1.0.0.jar --main-class com.dayab.widget.Launcher --type app-image --app-version 1.0.0 --vendor "rawscript" --description "GOVNO/TON Crypto Screamer Widget" --copyright "© 2025 rawscript" --java-options "-Dfile.encoding=UTF-8" --java-options "-Djava.awt.headless=false"
          
      - name: Build Windows MSI Installer
        run: |
          jpackage --input target --dest dist --name "GOVNO-Screamer-Installer" --main-jar govnoscreamer-widget-1.0.0.jar --main-class com.dayab.widget.Launcher --type msi --app-version 1.0.0 --vendor "rawscript" --description "GOVNO/TON Crypto Screamer Widget" --copyright "© 2025 rawscript" --win-menu --win-shortcut --win-dir-chooser --java-options "-Dfile.encoding=UTF-8" --java-options "-Djava.awt.headless=false"
          
      - name: Create Windows ZIP archive
        run: |
          cd dist
          powershell Compress-Archive -Path "GOVNO-Screamer" -DestinationPath "GOVNO-Screamer-Windows-Portable.zip"
          
      - name: Copy Universal JAR
        run: |
          copy target\govnoscreamer-widget-1.0.0.jar dist\GOVNO-Screamer-Universal.jar
          
      - name: Upload Windows Portable
        uses: actions/upload-artifact@v4
        with:
          name: windows-portable
          path: dist/GOVNO-Screamer-Windows-Portable.zip
          
      - name: Upload Windows MSI
        uses: actions/upload-artifact@v4
        with:
          name: windows-msi
          path: dist/*.msi
          
      - name: Upload Universal JAR
        uses: actions/upload-artifact@v4
        with:
          name: universal-jar
          path: dist/GOVNO-Screamer-Universal.jar

  build-linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y fuse desktop-file-utils imagemagick
          
      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2-
          
      - name: Build JAR
        run: mvn clean package -DskipTests
        
      - name: Build Linux app-image
        run: |
          jpackage --input target --dest dist --name "GOVNO-Screamer" --main-jar govnoscreamer-widget-1.0.0.jar --main-class com.dayab.widget.Launcher --type app-image --app-version 1.0.0 --vendor "rawscript" --description "GOVNO/TON Crypto Screamer Widget" --copyright "© 2025 rawscript" --java-options "-Dfile.encoding=UTF-8" --java-options "-Djava.awt.headless=false"
          
      - name: Build Linux deb
        run: |
          jpackage --input target --dest dist --name "GOVNO-Screamer" --main-jar govnoscreamer-widget-1.0.0.jar --main-class com.dayab.widget.Launcher --type deb --app-version 1.0.0 --vendor "rawscript" --description "GOVNO/TON Crypto Screamer Widget" --copyright "© 2025 rawscript" --linux-shortcut --linux-menu-group "Office" --linux-package-name govno-screamer --java-options "-Dfile.encoding=UTF-8" --java-options "-Djava.awt.headless=false"
          
      - name: Create Linux Archive
        run: |
          cd dist
          tar -czf GOVNO-Screamer-Linux-x64.tar.gz GOVNO-Screamer/
          
      - name: Download and setup AppImageTool
        run: |
          wget -O appimagetool "https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage"
          chmod +x appimagetool
          
      - name: Create AppImage
        run: |
          # Отладка: проверяем что создал jpackage
          echo "=== Отладка: Содержимое dist/ после jpackage ==="
          ls -la dist/
          echo ""
          
          # Директория, созданная jpackage (--type app-image)
          JPACKAGE_APP_DIR="dist/GOVNO-Screamer"
          
          # Проверяем, что jpackage создал директорию
          if [ ! -d "${JPACKAGE_APP_DIR}" ]; then
            echo "Ошибка: jpackage не создал директорию ${JPACKAGE_APP_DIR}"
            echo "Содержимое dist/:"
            ls -la dist/
            exit 1
          fi
          
          echo "=== Структура созданная jpackage ==="
          ls -laR "${JPACKAGE_APP_DIR}"
          echo ""

          # Наша AppDir, куда мы будем собирать все для appimagetool
          APPIMAGE_DIR="dist/GOVNO-Screamer.AppDir"
          mkdir -p "${APPIMAGE_DIR}"

          # Копируем все из jpackage-вывода в корень AppDir
          echo "Копируем файлы из ${JPACKAGE_APP_DIR} в ${APPIMAGE_DIR}..."
          cp -a "${JPACKAGE_APP_DIR}/." "${APPIMAGE_DIR}/" 
          
          EXECUTABLE_NAME="GOVNO-Screamer" 
          
          # Ищем исполняемый файл в различных возможных местах
          POSSIBLE_PATHS=(
            "bin/${EXECUTABLE_NAME}"
            "${EXECUTABLE_NAME}"
            "bin/GOVNO-Screamer"
            "GOVNO-Screamer"
          )
          
          TARGET_EXECUTABLE_IN_APPDIR=""
          
          echo "=== Поиск исполняемого файла ==="
          for path in "${POSSIBLE_PATHS[@]}"; do
            full_path="${APPIMAGE_DIR}/${path}"
            echo "Проверяем: ${full_path}"
            if [ -f "${full_path}" ]; then
              chmod +x "${full_path}"
              TARGET_EXECUTABLE_IN_APPDIR="${path}"
              echo "✓ Найден исполняемый файл: ${TARGET_EXECUTABLE_IN_APPDIR}"
              break
            fi
          done
          
          if [ -z "${TARGET_EXECUTABLE_IN_APPDIR}" ]; then
            echo "Ошибка: Исполняемый файл не найден!"
            echo "Структура AppDir:"
            find "${APPIMAGE_DIR}" -type f -executable
            exit 1
          fi

          # Создаем .desktop файл в корне AppDir
          cat > "${APPIMAGE_DIR}/${EXECUTABLE_NAME}.desktop" << EOF
          [Desktop Entry]
          Name=GOVNO Screamer
          Comment=GOVNO/TON Crypto Screamer Widget
          Exec=${TARGET_EXECUTABLE_IN_APPDIR}
          Icon=${EXECUTABLE_NAME}
          Type=Application
          Categories=Office;Finance;
          Terminal=false
          EOF
          chmod +x "${APPIMAGE_DIR}/${EXECUTABLE_NAME}.desktop"

          # Создаем кастомный AppRun скрипт
          echo "Создание AppRun скрипта указывающего на ${TARGET_EXECUTABLE_IN_APPDIR}..."
          cat > "${APPIMAGE_DIR}/AppRun" << 'EOF'
#!/bin/sh
HERE=$(dirname $(readlink -f "$0"))
# Найдем исполняемый файл
if [ -x "${HERE}/bin/GOVNO-Screamer" ]; then
    exec "${HERE}/bin/GOVNO-Screamer" "$@"
elif [ -x "${HERE}/GOVNO-Screamer" ]; then
    exec "${HERE}/GOVNO-Screamer" "$@"
else
    echo "Ошибка: Исполняемый файл не найден"
    exit 1
fi
EOF
          chmod +x "${APPIMAGE_DIR}/AppRun"
          echo "AppRun скрипт создан и сделан исполняемым."

          # Копируем иконку в корень AppDir
          ICON_SOURCE_PATHS=(
            "src/main/resources/icons/${EXECUTABLE_NAME}.png"
            "src/main/resources/icons/app-icon.png"
            "src/main/resources/icon.png"
            "icon.png"
          )
          
          ICON_DEST_PATH="${APPIMAGE_DIR}/${EXECUTABLE_NAME}.png"
          ICON_FOUND=false
          
          for icon_path in "${ICON_SOURCE_PATHS[@]}"; do
            if [ -f "${icon_path}" ]; then
              cp "${icon_path}" "${ICON_DEST_PATH}"
              echo "Иконка скопирована из ${icon_path}"
              ICON_FOUND=true
              break
            fi
          done
          
          if [ "$ICON_FOUND" = false ]; then
            echo "ПРЕДУПРЕЖДЕНИЕ: Иконка не найдена, создаем заглушку"
            # Создаем простую иконку-заглушку
            echo "Создание простой PNG иконки..."
            convert -size 256x256 xc:transparent -fill '#4CAF50' -draw 'circle 128,128 128,64' "${ICON_DEST_PATH}" 2>/dev/null || {
              echo "ImageMagick недоступен, пропускаем создание иконки"
            }
          fi

          echo "=== Финальная структура AppDir ==="
          ls -laR "${APPIMAGE_DIR}"
          echo ""

          # Создаем AppImage
          echo "Создание AppImage..."
          ARCH=x86_64 ./appimagetool "${APPIMAGE_DIR}" "dist/${EXECUTABLE_NAME}-Linux-x86_64.AppImage"
          
      - name: Upload Linux Archive
        uses: actions/upload-artifact@v4
        with:
          name: linux-archive
          path: dist/GOVNO-Screamer-Linux-x64.tar.gz
          
      - name: Upload Linux AppImage
        uses: actions/upload-artifact@v4
        with:
          name: linux-appimage
          path: dist/GOVNO-Screamer-Linux-x86_64.AppImage
          
      - name: Upload Linux Deb
        uses: actions/upload-artifact@v4
        with:
          name: linux-deb
          path: dist/*.deb

  build-macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          
      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2-
          
      - name: Build JAR
        run: mvn clean package -DskipTests
        
      - name: Build macOS app-image
        run: |
          jpackage --input target --dest dist --name "GOVNO-Screamer" --main-jar govnoscreamer-widget-1.0.0.jar --main-class com.dayab.widget.Launcher --type app-image --app-version 1.0.0 --vendor "rawscript" --description "GOVNO/TON Crypto Screamer Widget" --copyright "© 2025 rawscript" --mac-package-name "GOVNO Screamer" --java-options "-Dfile.encoding=UTF-8" --java-options "-Djava.awt.headless=false"
          
      - name: Create macOS Archive
        run: |
          cd dist
          tar -czf GOVNO-Screamer-macOS-x64.tar.gz GOVNO-Screamer.app/
        
      - name: Build macOS DMG
        run: |
          jpackage --input target --dest dist --name "GOVNO-Screamer-Installer" --main-jar govnoscreamer-widget-1.0.0.jar --main-class com.dayab.widget.Launcher --type dmg --app-version 1.0.0 --vendor "rawscript" --description "GOVNO/TON Crypto Screamer Widget" --copyright "© 2025 rawscript" --mac-package-name "GOVNO Screamer" --java-options "-Dfile.encoding=UTF-8" --java-options "-Djava.awt.headless=false"
          
      - name: Upload macOS Archive
        uses: actions/upload-artifact@v4
        with:
          name: macos-archive
          path: dist/GOVNO-Screamer-macOS-x64.tar.gz
          
      - name: Upload macOS DMG
        uses: actions/upload-artifact@v4
        with:
          name: macos-dmg
          path: dist/*.dmg

  release:
    needs: [build-windows, build-linux, build-macos]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true
          
      - name: Rename files with version
        run: |
          # Получаем версию из тега
          VERSION=${{ github.ref_name }}
          echo "Переименовываем файлы для версии: $VERSION"
          
          # Переименовываем файлы с версиями
          [ -f "GOVNO-Screamer-Windows-Portable.zip" ] && mv "GOVNO-Screamer-Windows-Portable.zip" "GOVNO-Screamer-Windows-Portable-${VERSION}.zip"
          [ -f "GOVNO-Screamer-Universal.jar" ] && mv "GOVNO-Screamer-Universal.jar" "GOVNO-Screamer-Universal-${VERSION}.jar"
          [ -f "GOVNO-Screamer-Linux-x64.tar.gz" ] && mv "GOVNO-Screamer-Linux-x64.tar.gz" "GOVNO-Screamer-Linux-x64-${VERSION}.tar.gz"
          [ -f "GOVNO-Screamer-Linux-x86_64.AppImage" ] && mv "GOVNO-Screamer-Linux-x86_64.AppImage" "GOVNO-Screamer-Linux-x86_64-${VERSION}.AppImage"
          [ -f "GOVNO-Screamer-macOS-x64.tar.gz" ] && mv "GOVNO-Screamer-macOS-x64.tar.gz" "GOVNO-Screamer-macOS-x64-${VERSION}.tar.gz"
          
          # Переименовываем MSI и DEB файлы
          for file in *.msi; do
            [ -f "$file" ] && mv "$file" "${file%.msi}-${VERSION}.msi"
          done
          
          for file in *.deb; do
            [ -f "$file" ] && mv "$file" "${file%.deb}-${VERSION}.deb"
          done
          
          for file in *.dmg; do
            [ -f "$file" ] && mv "$file" "${file%.dmg}-${VERSION}.dmg"
          done
          
          # Показываем финальный список файлов
          echo "Файлы для релиза:"
          ls -la *.zip *.jar *.tar.gz *.AppImage *.msi *.deb *.dmg 2>/dev/null || echo "Некоторые файлы могут отсутствовать"
          
      - name: Create Release Notes
        run: |
          cat > release_notes.md << EOF
          # GOVNO/TON Crypto Screamer Widget - Release ${{ github.ref_name }}
          
          ## Готовые к использованию файлы:
          
          ### 🖥️ Windows (рекомендуется)
          - **GOVNO-Screamer-Installer-${{ github.ref_name }}.msi** - MSI установщик с автоматической установкой
          - **GOVNO-Screamer-Windows-Portable-${{ github.ref_name }}.zip** - Портативная версия (не требует установки)
          
          ### 🐧 Linux
          - **govno-screamer-${{ github.ref_name }}_amd64.deb** - DEB пакет для Debian/Ubuntu
          - **GOVNO-Screamer-Linux-x86_64-${{ github.ref_name }}.AppImage** - Универсальный AppImage (chmod +x и запускай)
          - **GOVNO-Screamer-Linux-x64-${{ github.ref_name }}.tar.gz** - Архив с исполняемыми файлами
          
          ### 🍎 macOS
          - **GOVNO-Screamer-Installer-${{ github.ref_name }}.dmg** - DMG установщик для macOS
          - **GOVNO-Screamer-macOS-x64-${{ github.ref_name }}.tar.gz** - Архив с .app файлом
          
          ### ☕ Универсальная версия (любая ОС с Java)
          - **GOVNO-Screamer-Universal-${{ github.ref_name }}.jar** - Требует Java 8+ (java -jar GOVNO-Screamer-Universal.jar)
          
          ## Как запустить:
          1. **Windows**: Скачайте .msi или распакуйте .zip
          2. **Linux**: Скачайте .AppImage, сделайте исполняемым (chmod +x) и запустите
          3. **macOS**: Скачайте .dmg или распакуйте .tar.gz
          4. **Любая ОС**: Установите Java и запустите .jar файл
          
          ## Возможности:
          - 🕒 Реальное время и дата
          - 📊 Анимированная полоса прогресса
          - 🎨 Современный дизайн с градиентами
          - 📌 Всегда поверх других окон
          - 🖱️ Перетаскивание мышью
          - 💾 Системный трей
          - ⚙️ Интерактивные кнопки
          EOF
          
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            *.msi
            *.zip
            *.tar.gz
            *.AppImage
            *.deb
            *.dmg
            *.jar
          body_path: release_notes.md
          draft: false
          prerelease: false
          make_latest: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}